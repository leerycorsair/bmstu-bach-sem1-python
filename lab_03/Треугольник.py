#Выполнил: Леонов Владислав
#ИУ7-16Б
import math #Подключение библиотеки math

print('*************************************************************************')
print()
print('Вас приветствует программа для нахождения длин сторон треугольника по')
print('целочисленным координатам вершин, нахождения медианы, проведенной из наименьшего угла,')
print('определения принадлежности заданной точки треугольнику и в случае')
print('истины нахождения расстояния до ближайшей стороны, а также определения')
print('является ли заданный треугольник равнобедренным')
print()

eps = 1e-4

#Ввод координат вершин
Ax = int(input('Введите координату x точки A: '))
Ay = int(input('Введите координату y точки A: '))
Az = int(input('Введите координату z точки A: '))
Bx = int(input('Введите координату x точки B: '))
By = int(input('Введите координату y точки B: '))
Bz = int(input('Введите координату z точки B: '))
Cx = int(input('Введите координату x точки C: '))
Cy = int(input('Введите координату y точки C: '))
Cz = int(input('Введите координату z точки C: '))
print()

#Вычисление сторон
a = math.sqrt((Bx-Cx)**2 + (By-Cy)**2 + (Bz-Cz)**2)
b = math.sqrt((Ax-Cx)**2 + (Ay-Cy)**2 + (Az-Cz)**2)
c = math.sqrt((Ax-Bx)**2 + (Ay-By)**2 + (Az-Bz)**2)

#Нахождение наибольшей стороны
big = a
sr1 = b
sr2 = c
if big < b:
    big,sr1 = sr1,big
if big < c:
    big,sr2 = sr2,big

#Проверка существования треугольника
if big >= sr1 + sr2:
    print ('Треугольник не существует, одна из сторон нулевая или точки лежат на одной прямой, введите другие координаты')
else:
    #Вывод сторон
    print('AB = ', '{:.3}'.format(c))
    print('BC = ', '{:.3}'.format(a))
    print('AC = ', '{:.3}'.format(b))
    print()

    #Нахождение наименьшей стороны
    lw = a
    if lw > b:
        lw = b
    if lw > c:
        lw = c

    #Нахождение медианы, проведенной из наименьшего угла
    if lw == a:
        m = 0.5 * math.sqrt(2*b*b + 2*c*c - a*a)
    elif lw == b:
        m = 0.5 * math.sqrt(2*a*a + 2*c*c - b*b)
    else:
        m = 0.5 * math.sqrt(2*a*a + 2*b*b - c*c)
    #Вывод медианы
    print('Медиана, проведенная из наименьшего угла = ', '{:.3}'.format(m))
    print()

    #Ввод координат точки
    Px = int(input('Введите координату x произвольной точки: '))
    Py = int(input('Введите координату y произвольной точки: '))
    Pz = int(input('Введите координату z произвольной точки: '))
    print()

    #Нахождение расстояния от точки до вершин треугольника
    AP = math.sqrt((Ax-Px)**2 + (Ay-Py)**2 + (Az-Pz)**2)
    BP = math.sqrt((Bx-Px)**2 + (By-Py)**2 + (Bz-Pz)**2)
    CP = math.sqrt((Cx-Px)**2 + (Cy-Py)**2 + (Cz-Pz)**2)

    #Вычисление площадей треугольников, образованных введенной точкой и двумя вершинами
    p = (c + AP + BP)/2
    SABP = math.sqrt(p*(p-c)*(p-BP)*(p-AP))
    p = (a + BP + CP)/2
    SBCP = math.sqrt(p*(p-a)*(p-BP)*(p-CP))
    p = (b + AP + CP)/2
    SACP = math.sqrt(p*(p-b)*(p-CP)*(p-AP))
    p = (a + b + c)/2
    SABC = math.sqrt(p*(p-a)*(p-b)*(p-c))

    #Проверка принадлежности точки треугольнику
    if SABC - SABP - SBCP - SACP - eps > 0 or SABC - SABP - SBCP - SACP + eps > 0 :
        print('Точка принадлежит треугольнику')
        prin = True
    else:
        print('Точка не принадлежит треугольнику')
        prin = False

    #Вычисление расстояния от точки до сторон треугольника
    if prin:
        hBPC = SBCP*2/a
        hACP = SACP*2/b
        hABP = SABP*2/c
        # Нахождение наименьшего расстояния от точки до сторон треугольника
        lw = hBPC
        if lw > hACP:
            lw = hACP
        if lw > hABP:
            lw = hABP
        if lw < eps:
            print('Точка лежит на стороне треугольника')
        else:
            print('Расстояние до ближайшей стороны или ее продолжения = ', '{:.3}'.format(lw))
    print()

    #Проверка равнобедренности треугольника
    if abs(a-b) < eps or abs(a-c) < eps or abs(b-c) < eps:
        print('Треугольник является равнобедренным')
        print()
    else:
        print('Треугольник не является равнобедренным')
        print()

print('*************************************************************************')
